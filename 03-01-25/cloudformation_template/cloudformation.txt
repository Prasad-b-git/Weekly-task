Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaPermission
    Properties:
      BucketName: year24082025
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaFunction.Arn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          def handler(event, context):
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']
              sns = boto3.client('sns')
              message = f"New file uploaded to bucket {bucket}:\nFile name: {key}"
              sns.publish(
                  TopicArn=os.environ['SNS_TOPIC_ARN'],
                  Message=message,
                  Subject='New S3 Upload Notification'
              )
              return {'statusCode': 200, 'body': json.dumps('Notification sent successfully!')}
      Runtime: python3.9
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic

  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::year24082025
      SourceAccount: !Ref AWS::AccountId

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: year24082025-notifications
      Subscription:
        - Protocol: email
          Endpoint: Prasadsb240801@gmail.com

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SNSTopic

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref SNSTopic

Outputs:
  BucketName:
    Description: Name of the created S3 bucket
    Value: !Ref S3Bucket

  SNSTopicARN:
    Description: ARN of the SNS Topic
    Value: !Ref SNSTopic

  LambdaFunctionARN:
    Description: ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn
